<xten name="image" element="div">
    <mandatory>name</mandatory>
    <allow>owner, admin</allow>
    <view>
        <img src="[$src||images/blank.svg]" alt="[$alt||$name]" onerror="this.onerror=null; this.src='images/error.svg';" >
            <click fname="_imageLinkClick">
            <%
                const href = element.getAttribute('href');
                if (href) {
                    window.location.href = href;
                }
            %>
            </click>
        </img>
    </view>

    <toolbar top="[$toolbar-top||0]" left="[$toolbar-left||0]" right="[$toolbar-right||auto]" bottom="[$toolbar-bottom||auto]">
        <icon name="save">
            <tooltip>save image</tooltip>
            <click fname="_imageSaveImage">
                <upload name="save-image" file="changed-file" file-url="uploaded-url" />
                <set-attrib name="src" child="img">
                    element['uploaded-url']
                </set-attrib>
                <set-attrib name="src">
                    element['uploaded-url']
                </set-attrib>
                <unset-var name="uploaded-url" />
                <unset-var name="changed-file" />
                <remove-class classes="image-changed" />
            </click>
        </icon>
        <icon name="close">
            <tooltip>cancel</tooltip>
            <click fname="_imageCancelImageSave">
                <set-attrib name="src" child="img">
                    element.getAttribute('src')
                </set-attrib>
                <unset-var name="changed-file" />
                <remove-class classes="image-changed" />
            </click>
        </icon>
        <icon name="upload">
            <tooltip>select image</tooltip>
            <event name="click" fname="_imageUploadImage">
                <code>
                <%
                    const urlParams = new URLSearchParams(window.location.search);
                    const demo = urlParams.get('demo') == 'yes';

                    if (demo) {
                        const file = await wxfns.selectFile('image/*');
                        const url = URL.createObjectURL(file);
                        const parent = wxfns.closestXten(event.target, 'image');
                        const img = parent.querySelector('img');
                        img.setAttribute('src', url);
                        return;
                    }
                %>
                </code>
                <selectfile file-type="image/*" file="changed-file" />
                <set-attrib name="src" child="img">
                    URL.createObjectURL(element['changed-file'])
                </set-attrib>
                <add-class classes="image-changed" />
            </event>
        </icon>
        <icon name="add-link">
            <tooltip>add hyperlink</tooltip>
            <event name="click" fname="_imageAddHyperlink">
            <%
                const urlParams = new URLSearchParams(window.location.search);
                const demo = urlParams.get('demo') == 'yes';

                if (demo) {
                    wxfns.inform('Hyperlinks can be added by simply clicking on chail link');
                    return;
                }

                
                const value = await wxfns.getUserValue('hyperlink', 'hyperlink', 'Hyperlink', {value: element.getAttribute('href')});
                const result = await element.transaction('add-hyperlink', value);
                if (value) {
                    element.setAttribute('href', value);
                }
                else
                {
                    element.removeAttribute('href');
                }
            %>
            </event>
        </icon>
        <!-- ### to be fixed image-list modal view is not evaluated properly -->
        <!--icon name="folder-open">
            <tooltip>select image from server</tooltip>
            <event name="click" fname="_imageSelectServerImage">
            <%
                const urlParams = new URLSearchParams(window.location.search);
                const demo = urlParams.get('demo') == 'yes';

                if (demo) {
                    wxfns.inform('Server images can be browsed by clicking on folder');
                    return;
                }

                const image = element.querySelector('img');
                const url = image.getAttribute('src');

                element.notify('open-modal', {name: 'image-list', message: 'image-list-opened', url});

                const modal = document.querySelector('[name="image-list-dialog"]');
                const result = await modal.open(url);
                if (result.action == 'cancel') {
                    return;
                }
                const selected = result.data;
                if (selected) {
                    image.setAttribute('src', selected);
                    element.transaction('save-page-data', selected);
                }
            %>
            </event>
        </icon -->
    </toolbar>

    <style>
        display: flex;
        position: relative;
        overflow: hidden;
        width: 100%;
        max-height: 100%;
        justify-content: center;
        align-items: center;
    </style>

    <nodeStyle>
        aspect-ratio: [$aspect-ratio||auto];
        overflow: [$overflow||hidden];
    </nodeStyle>

    <css>
        .wx-xten-image > .wx-xten-toolbar {
            display: none;
            position: relative;
        }
        .wx-xten-image.wx-state-editable .wx-xten-toolbar {display: flex;}
        .wx-xten-image.image-changed .wx-xten-toolbar {display: flex;}
        .wx-xten-image.image-changed {border: 5px solid red;}
        .wx-xten-image > img {
            object-fit: cover; 
            object-position: center;
            width: 100%;
            height: 100%;
        }
        .wx-xten-image > .wx-xten-toolbar > .close {display: none;}
        .wx-xten-image > .wx-xten-toolbar > .save {display: none;}
        .wx-xten-image.image-changed > .wx-xten-toolbar > .close {display: inline-block;}
        .wx-xten-image.image-changed > .wx-xten-toolbar > .save {display: inline-block;}
    </css>

    <cssNode>
        #[$id] > img {
            aspect-ratio: [$aspect-ratio||auto];
            border-radius: [$border-radius||0];
        }

        #[$id].wx-state-editable > .wx-xten-toolbar {
            display: flex;
            position: absolute;
            top: [$toolbar-top||0];
            left: [$toolbar-left||0];
            right: [$toolbar-right||auto];
            bottom: [$toolbar-bottom||auto];
        }
    </cssNode>

    <initElement>
    <%
        const urlParams = new URLSearchParams(window.location.search);
        const demo = urlParams.get('demo') == 'yes';

        if (demo) {
            element.addClass('wx-state-editable');
            return;
        }
    %>
    </initElement>

    <load>
    <%
        const img = node.findChildren('img')[0];
        const value = await database.inlineValue(node, context, xten);
        if (value) {
            node.attribs.src = value;
            img.attribs.src = value;
        }
        else
        {
            node.attribs.src = 'images/blank.svg';
            img.attribs.src = 'images/blank.svg';
        }

        const href = await database.hrefValue(node, context, xten);
        if (href) {
            node.attribs.href = href;
        }
    %>
    </load>
</xten>
