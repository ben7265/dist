<xten name="inline" element="div">
    <mandatory>name</mandatory>
    <allow>owner, admin</allow>

    <view>
        <span class="inline-value"></span>
    </view>

    <nodeStyle>
        text-align: [$align||center];
    </nodeStyle>

    <css>
        .wx-xten-inline .inline-value {
            
        }
        .wx-xten-inline._unsaved_inline {
            border: 1px solid blue;
        }

        .wx-xten-inline._empty_inline {
            border: 1px solid red;
            width: 100%;
            min-height: 20px;
        }
    </css>

    <load>
    <%
        const value = await database.objectValue(node, context, xten);
        const span = node.findChild('.inline-value');
        span.text = value ? value : (node.text && node.text.trim() ? node.text : 'inline ' + node.attribs.name);
    %>
    </load>

    <initElement>
    <%
        const demo = query.demo == 'yes';
        const span = element.querySelector('.inline-value');
        var origValue = span.innerText.trim();

        if (demo) {
            element.setAttribute('contenteditable', true);
            span.innerText = sessionStorage.getItem('inline:' + element.getAttribute('name')) || '';
            return;
        }

        const saveData = async () => {
            const text = span.innerText.trim();
            if (demo) {
                sessionStorage.setValue(element.getName() + '-demo', text);
                return;
            }

            if (text != origValue) {
                await element.saveData(text);
                origValue = text;
            }

            element.removeClass('_unsaved_inline');

            if (element.timeout) {
                clearTimeout(element.timeout);
                delete element.timeout;
            }
        };

        const changed = () => {
            const text = span.innerText.trim();
            if (!text.length) {
                element.addClass('_empty_inline');
            }
            else
            {
                element.removeClass('_empty_inline');
            }
        };

        const access = element.checkAccess();
        if (access) {
            span.setAttribute('contenteditable', true);
            changed();
        }
        else
        {
            span.removeAttribute('contenteditable');
        }

        span.addEventListener('keyup', event => {
            event.preventDefault();
            event.stopPropagation();

            changed();

            const text = span.innerText.trim();

            if (text != origValue) {
                element.addClass('_unsaved_inline');
                if (!element.timeout) {
                    element.timeout = setTimeout(saveData, 2000);
                }
            }
            else {
                if (element.timeout) {
                    clearTimeout(element.timeout);
                    delete element.timeout;
                }
                element.removeClass('_unsaved_inline');
            }
        });

        span.addEventListener('blur', async (event) => {
            event.preventDefault();
            event.stopPropagation();

            changed();
            await saveData();
        });
    %>
    </initElement>

    <event name="click" fname="_inlineEventBlur">
    <%
        const span = element.querySelector('.inline-value');
        span.focus();
    %>
    </event>
</xten>
