<xten name="auto-input" element="div">
    <mandatory>name</mandatory>
    <allow>admin</allow>

    <css>
        .wx-xten-auto-input .auto-input-error {
            color: red; 
            padding: 3px; 
            font-size: 0.8em;
        }
    </css>

    <view>
        <input class="auto-input-control" name="[$name]" required="[$required||false]" placeholder="[$placeholder||]" />
        <div class="auto-input-error"></div>
    </view>

    <initElement>
    <%
        const access = element.checkAccess();
        const input = element.querySelector('.auto-input-control');
        input.disabled = !access;
    %>
    </initElement>

    <load>
    <%
        const value = await database.inlineValue(node, context, xten);
        const input = node.findChild('input');
        input.attribs.value = value;
    %>
    </load>

    <event name="input" fname="_autoSaveInputEventInput">
    <%
        const valid = element.invoke('validate', event.currentTarget);

        if (valid) {
            const result = await element.transaction('save-page-data', element.value);
        }
    %>
    </event>

    <function name="validate">
    <%
        const input = element.querySelector('.auto-input-control');
        const validate = element.getAttribute('validate');
        const required = element.getAttribute('required') == 'true';
        const errorElement = element.querySelector('.auto-input-error');

        errorElement.innerText = '';

        var value = input.value;        
        if (!value) {
            if (required) {
                errorElement.innerText = 'Input value is required';
                return false;
            }
            return true;
        }

        if (!validate) {
            return true;
        }

        var valid = true;
        const checks = validate.split(/\s*\,\s*/);
        for (var i = 0; i < checks.length; i++) {
            const _check = checks[i].trim();
            const matches = _check.match(/^([a-z]+)\s*(\(\s*(.*)\s*\))?$/);
            const _fname = matches[1];
            if (!_fname || !validations[_fname]) {
                errorElement.innerText = 'validation ' + _fname + ' not defined';
                return false;
            }
            const _args = matches[3];
            const error = validations[_fname](value, _args);
            if (error) {
                valid = false;
                errorElement.innerText = 'Input is ' + error;
                break;
            }
        }

        return valid;
    %>
    </function>
</xten>