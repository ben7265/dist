<!-- default system xtens -->
<xten name="add-libs" element="_hidden">
    <init>
    <%
        const _value = (node.attribs['libs'] || node.text).trim();
        if (!_value) {
            return;
        }
        if (!context.libs) {
            context.libs = {};
        }
        const list = _value.split(',');
        list.forEach((lib) => {
            const _lib = lib.trim();
            if (!context.libs[_lib]) {
                context.libs[_lib] = _lib;
            }
        });
    %>
    </init>
</xten>

<xten name="css" element="_hidden">
    <init>
    <%
        const selector = node.getValue('selector') || '#' + node.attribs.id;
        if (!selector) {
            common.nodeerror('selector or element id is mandatory', node);
            return false;
        }
        context.style[selector] = node.text;
    %>
    </init>
</xten>

<xten name="sudo" element="_hidden">
    <init>
    <%
        const sudo = node.attribs.sudo || node.attribs.name;
        if (!sudo) {
            common.nodeerror('sudo name is mandatory ' + node.attribs.id, node);
            return true;
        }

        var selector = node.getValue('selector');
        if (selector) {
            context.style[selector + ':' + sudo] = node.text;
            return;
        }

        if (!node.parent.attribs.id) {
            node.parent.attribs.id = 'x-' + common.uuid();
        }

        selector = node.parent.attribs.id;
        context.style['#' + selector + ':' + sudo] = node.text;
    %>
    </init>
</xten>

<xten name="change-image" element="_hidden">
    <event name="click">
        <selectfile file-type="image/*" />
        <code>
            {
                const imageDiv = element.closest('.wx-xten-image');
                const img = imageDiv.querySelector('img');
                const url = URL.createObjectURL(data);
                img.src = url;
            }
        </code>
    </event>
</xten>

<xten name="parentclass" element="_hidden">
    <init>
        node.parent.addClass(node.text.trim());
    </init>
</xten>

<!--xten name="hover" element="_hidden">
    <init>
        if (!node.parent.attribs.id) {
            node.parent.attribs.id = 'x-' + common.uuid();
        }
        const name = node.parent.attribs.id + ':hover;
        if (!context.css) {
            context.css = {};
        }
        const _inline = node.parent.attribs.style ? {} : node.parseStyles(context.css[name]);


        const _olds = context.css[name] ? {} : node.parseStyles(context.css[name]);
        const _extras = node.attribs.style ? node.parseStyles(node.attribs.style);
        for (var _prop in _extras) {
            _olds[_prop] = _extras[_prop];
        }
        context.css[name] = node.makeStyle(_olds);
    </init>
</xten -->

<xten name="click" element="_hidden">
    <init>
        addEvent(node, 'click', context, prop);
    </init>
</xten>

<xten name="event" element="_hidden">
    <init>
        addEvent(node, node.getValue('name'), context, prop);
    </init>
</xten>

<xten name="font" element="_hidden">
    <link>https://fonts.googleapis.com/css2?family=[$name]:wght@[$weight]&display=swap</link>
</xten>
