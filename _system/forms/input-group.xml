<xten name="input-group" element="div">
    <mandatory>name, type</mandatory>
    <style>
        position: relative;
        width: 100%;
        height: 100%;
        display: flex; 
        align-items: center;
        padding: 2px 0;
    </style>

    <css>
        .wx-xten-input-group .input-label {
            flex: 1;
            min-width: 150px;
            text-align: right;
            padding-right: 10px;
        }

        .wx-xten-input-group .composite-input {
            flex: 2;
            width: 100%;
        }

        .wx-xten-input-group[type="textarea"] label {
            display: inline-block;
        }

        .wx-xten-input-group textarea {
            width: 100%;
            min-height: 100px;
        }

        .wx-xten-input-group .composite-input {
            display: flex;
            align-items: center;
            border: 1px solid #ccc;
            border-radius: 5px;
            overflow: hidden;
        }

        .wx-xten-input-group .composite-input input {
            border: none;
        }

        .wx-xten-input-group .composite-input .input-group-control {
            border: none;
            box-sizing: border-box;
            outline: none;
            flex-grow: 1;
        }

        .wx-xten-input-group .composite-input:has(.invalid-value) {
            border: 1px solid red !important;
        }
    </css>

    <cssNode>
        #[$id] .composite-input {
            border: [$group-border||1px solid #ccc];
            border-radius: [$group-radius||5px];
        }

        #[$id] .composite-input .prefix,
        #[$id] .composite-input .suffix {
            background-color: [$button-color||lightgrey];
        }

        #[$id] .composite-input .prefix {
            border-right: 1px solid #ccc;
            padding: [$padding||5px]; 
        }

        #[$id] .composite-input .suffix {
            border-left: 1px solid #ccc;
            padding: [$padding||5px]; 
        }

        #[$id] .composite-input input {
            padding: [$padding||5px]; 
        }
    </cssNode>

    <view>
        <if var-value="label">
            <label class="input-label">
                [$label]
                <if var-value="required">
                    <space n="1"/>*
                </if>
            </label>
        </if>
        <div class="composite-input">
            <node-content name="prefix" element="span" />
            <switch switch-value="node.closest('.wx-xten-input-group').attribs.type">
                <case match="textarea">
                    <textarea name="[$name]" class="input-group-control" placeholder="[$placeholder||]" >
                        [$value]
                    </textarea>
                </case>
                <case match="check-human">
                    <check-human class="input-group-control" />
                </case>
                <case match="color">
                    <color-picker name="[$name]" value="[$value]" class="input-group-control" placeholder="[$placeholder||]" />
                </case>
                <default>
                    <input name="[$name]" value="[$value||]" type="[$type]" class="input-group-control" placeholder="[$placeholder||]" />
                </default>
            </switch>
            <node-content name="suffix" element="span" />
        </div>
    </view>

    <init>
    <%
        const label = node.attribs.label;

        switch (true) {
            case label == 'none': 
                delete node.attribs.label;
                break;
            case !label: 
                node.attribs.label = node.attribs.name.split('-').map(v => v[0].toUpperCase() + v.slice(1)).join(' '); 
                break;
            default:
        }
    %>
    </init>

    <initElement>
    <%
        const type = element.getAttribute('type');

        var input = element.querySelector('.input-group-control');
        if (!input) {
            return;
        }

        for (const attr of element.attributes) {
            const prop = attr.name;

            const ignore = ['name', 'type', 'placeholder', 'id', 'label', 'txnkey', 'class', 'element', 'xten'];
            if (ignore.includes(prop)) {
                continue;
            }

            if (prop === 'required' && attr.value === 'true') {
                input.setAttribute('required', 'required');
                continue;
            }

            input.setAttribute(prop, attr.value);
        }
    %>
    </initElement>
</xten>
