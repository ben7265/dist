<xten name="navbar">
    <element>div</element>
    <_class>navclass-[$orientation||row]</_class>
    <style>
        display:flex;
        text-transform: [$transform||none];
        position: relative;
    </style>
    <nodeStyle>
        flex-direction: [$orientation||row];
        gap: [$item-gap||0];
    </nodeStyle>
    <css>
        .wx-xten-navbar .wx-xten-navitem {flex: [$nav-item-flex||1 1 auto]; text-align: [$align-navitem||center]}
        .wx-xten-navbar .wx-xten-navitem::first {padding-left: 0;}
        .wx-xten-navbar .wx-xten-navitem::last {padding-right: 0;}
    </css>
    <cssNode>
        #[$id] > .wx-xten-navgroup > .wx-xten-navbar {z-index:[$index||1];display:none;}
        #[$id] > .wx-xten-navitem {cursor: [$nav-cursor||pointer];}
        #[$id] > .wx-xten-navitem { text-decoration: none; [$navitem-style|| ] }
        #[$id] > .wx-xten-navitem:hover { [$navitem-hover-style|| ] }

        #[$id] > .wx-xten-navgroup:hover > .navclass-column {display:flex;position:absolute;top:[$nav-top];left:[$nav-left||0];}
        #[$id] > .wx-xten-navgroup:hover > .navclass-row {display:flex;position:absolute;top:[$nav-top||0];left:[$nav-left||0];}

        #[$id] > .wx-xten-navgroup > .wx-xten-navitem { [$navitem-style|| ] }
        #[$id] > .wx-xten-navgroup:hover > .wx-xten-navitem { [$navitem-hover-style|| ] }
    </cssNode>
</xten>

<xten name="navitem" element="span">
    <style>
        display: inline-block;
        position: relative;
        text-decoration: none;
        color: inherit;
    </style>
    <css>
        .navclass-column > .wx-xten-navitem {text-align: left;}
        .wx-xten-navitem a {text-decoration: none; color: inherit;}
    </css>
    <event name="click">
        <code>
            <%
                event.preventDefault();
                element = event.target;
                const href = element.getAttribute('href');
                if (href && href != '#') {
                    window.location.href = href;
                }
            %>
        </code>
    </event>
</xten>

<xten name="navgroup">
    <style>
        display: inline-block;
        position: relative;
    </style>
    <element>div</element>
</xten>

<xten name="tooltip" element="div">
    <parentclass>tooltip-parent</parentclass>
    <style>
        position: absolute;
        display: none;
        width: max-content;
    </style>
    <nodeStyle>
        left: [$left||0];
        right: [$right||auto];
        top: [$top||calc(100%)];
        z-index: [$index||2];
        background-color: [$background||white];
        padding: [$padding||5px];
        border: [$border||1px solid grey];
    </nodeStyle>

    <initElement>
    <%
        const screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        const screenHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;

        const parentElement = element.parentElement;
        parentElement.addEventListener('mouseenter', () => {
            element.style.display = 'block';
            const tooltipRect = element.getBoundingClientRect();
            if ((tooltipRect.left + tooltipRect.width) > screenWidth) {
                element.style.right = 0;
                element.style.left = 'auto';
            }
            if ((tooltipRect.top + tooltipRect.height) > screenHeight) {
                element.style.top = '-' + tooltipRect.height + 'px';
            }
        });

        parentElement.addEventListener('mouseleave', () => {
            element.style.display = 'none';
        });
    %>
    </initElement>
</xten>

<xten name="icon" element="div">
    <view>
        <div name="icon-code">

        </div>
        <!--img src="icons/[$name].svg" width="100%" height="100%"/ -->
    </view>
    <style>
        position: relative;
        display: inline-block;
    </style>
    <nodeStyle>
        width: [$width||30px];
        height: [$height||30px];
        border: [$border||1px solid lightgrey];
        background: [$background-color||#fefefa];
        [$icon-style||];
    </nodeStyle>
    <css>
        .wx-xten-icon > .icon-code {width: 100%;height: 100%;}
    </css>

    <init>
        <%
        const name = node.getValue('name');
        const code = node.findNamedChild('div', 'icon-code');
        if (!globals.icons) {
            globals.icons = {};
        }

        if (globals.icons[name]) {
            code.addChild(globals.icons[name].clone());
            return;
        }

        const result = files.read('public/icons/' + name + '.svg', context.config.siteroot);
        if (result.rc != 'success') {
            const child = code.newChild('div');
            child.text = '.';
        }
        const filepath = 'public/icons/' + name + '.svg';
        const _lines = preprocessor(filepath, context.config.siteroot);
        if (!_lines) {
            common.error('could not parse file : ' + filepath);
            node.attribs.error('could not parse file : ' + filepath);
            return;
        }
        const root = parser(_lines, filepath, context.config.siteRoot);
        const svg = root.findChildren('svg')[0];
        if (!svg.attribs.viewBox) {
            svg.attribs.viewBox = '0 0 ' + svg.attribs.width + ' ' + svg.attribs.height;
            delete svg.attribs.width;
            delete svg.attribs.height;
        }
        code.addChild(svg);
        globals.icons[name] = svg.clone();
        %>
    </init>
</xten>

<xten name="toolbar" element="div">
    <style>
        display: flex;
        gap: 0;
    </style>

    <nodeStyle>
        top: [$top||0];
        right: [$right||0];
        left: [$left||auto];
        bottom: [$bottom||auto];
        position: [$position||absolute];
        z-index: [$index||1];
    </nodeStyle>
</xten>

<xten name="circle" element="div">
    <style>
        overflow: hidden;
    </style>
    <nodeStyle>
        border-radius: [$radius||50%];
    </nodeStyle>
</xten>

<xten name="line" element="div">
    <style>
        position: relative;        
    </style>

    <nodeStyle>
        border-top: [$line-style||1px solid #000000];
    </nodeStyle>

    <cssNode>
        #[$id]:before {
            content: "";
            width: 100%;
            border-top: [$before-style||none];
            position: absolute;
            top: -5px;
        }
        #[$id]:after {
            content: "";
            width: 100%;
            border-top: [$after-style||none];
            position: absolute;
            top: 5px;
        }
    </cssNode>
</xten>

<xten name="_list" element="_hidden">
    <toolbar name="list-toolbar" class="list-toolbar">
        <icon name="add">
            <tooltip>add new list item</tooltip>
            <click>
                <transaction name="add-list-item" />
                <reload />
            </click>
        </icon>
    </toolbar>

    <style>
        position: relative;
    </style>

    <css>
        .wx-xten-list > .wx-view-datalist {
            position: relative;
            width: 100%;
        }
    </css>

    <init>
    <%
        xten._data = {};
        const _toolbar = node.findChild('toolbar');
        const toolbar = _toolbar.clone();
        _toolbar.remove();
        xten._data.children = node.children;
        xten._data.name = node.getValue('name');

        node.empty();
        const list = node.newChild('div');
        list.attribs.name = 'wx-view-datalist';
        list.addClass('wx-view-datalist');
        node.addChild(toolbar);
    %>
    </init>

    <load>
    <%
        const wrapper = new DomNode('div');
        const toolbar = node.find('.list-toolbar')[0].clone();
        const list = node.findNamedChild('div', 'wx-view-datalist').clone();
        list.empty();
        wrapper.addChild(list);
        wrapper.addChild(toolbar);

        node.empty();
        node.insertChildren(0, wrapper.children);

        const value = await database.inlineValue(node, context, xten);
        if (!value || !value.length) {
            node.attribs['item-count'] = '0';
            return;
        }

        node.attribs['item-count'] = value.length.toString();

        for (var i = 0; i < value.length; i++) {
            const listitem = list.newChild('listitem', 'last');
            xten._data.children.forEach(child => {
                listitem.addChild(child.clone());
            });
            
            const uid = value[i].uid;
            processXtens(listitem, context);
            listitem.iterate((_node) => {
                if (_node.attribs['list-child']) {
                    _node.attribs['list-selector'] = xten._data.name + '.$[list-idx]';
                    _node.attribs['list-idx'] = i.toString();
                }
            });

            common.substituteVars(listitem, node.attribs);

            listitem.attribs.id = uid;
            listitem.attribs.name = node.getValue('name');
            listitem.attribs['list-idx'] = i.toString();
            if (i == 0) {
                listitem.addClass('active');
            }
        }
    %>
    </load>
</xten>

<xten name="listitem" element="div">
    <style>
        position: relative;
    </style>

    <toolbar name="list-item-toolbar" right="31px">
        <icon name="remove">
            <tooltip>delete list item</tooltip>
            <click>
                <transaction name="delete-list-item" />
                <reload />
            </click>
        </icon>
    </toolbar>
</xten>

<xten name="grid" extend="_list" element="div">
    <mandatory>columns</mandatory>
    <css>
        .wx-xten-list > .wx-view-datalist {
            display: flex;
            position: relative;
            width: 100%;
        }
    </css>
    <cssNode>
        #[$id] > .wx-view-datalist {
            flex-direction: [$orientation||column];
            gap: [$item-gap||0];
            flex-wrap: wrap; 
            width: 100%;
        }

        #[$id] > .wx-view-datalist > .wx-xten-listitem {
            flex-basis: calc((100% / [$columns||1]) - [$item-gap||0px] * ([$columns||1] - 1) / [$columns||1] ); 
            [$listitem-style|| ];
        }
    </cssNode>
</xten>

<xten name="list" extend="_list" element="div">
    <css>
        .wx-xten-list > .wx-view-datalist {
            display: flex;
            position: relative;
            width: 100%;
        }
    </css>
    <cssNode>
        #[$id] > .wx-view-datalist {
            flex-direction: [$orientation||column];
            gap: [$item-gap||0];
            width: 100%;
        }

        #[$id] > .wx-view-datalist > .wx-xten-listitem {
            flex: 1 1 auto;
        }
    </cssNode>
</xten>

<xten name="banner" extend="_list" element="div">
    <style>
        position: relative;
    </style>

    <!--toolbar>
        <icon name="info">
            <tooltip>extra buttons</tooltip>
        </icon>
    </toolbar -->

    <view>
        <cover>
            <image name="banner-image" list-selector="[$name].$[list-idx]" />
        </cover>
    </view>

    <data>
        <pos-left>
            <icon name="left">
                <click>
                <%
                    const element = event.target.closest('.wx-xten-banner');
                    var active = element.querySelector('.wx-xten-listitem.active');
                    const idx = parseInt(active ? active.getAttribute('list-idx') : '0');
                    var total = element.querySelectorAll('.wx-xten-listitem').length;
                    active.classList.remove('active');
                    const next = idx == 0 ? total - 1 : idx - 1;
                    const target = element.querySelector('.wx-xten-listitem[list-idx="' + next.toString() + '"]');
                    target.classList.add('active');
                    const listToolbar = element.querySelector('.list-toolbar');
                    const itemToolbar = target.querySelector('.list-item-toolbar');
                    adjustToolbarPosition([listToolbar, itemToolbar]);
                %>
                </click>
            </icon>
        </pos-left>

        <pos-right>
            <icon name="right">
                <click>
                <%
                    const element = event.target.closest('.wx-xten-banner');
                    var active = element.querySelector('.wx-xten-listitem.active');
                    const idx = parseInt(active ? active.getAttribute('list-idx') : '0');
                    var total = element.querySelectorAll('.wx-xten-listitem').length;
                    active.classList.remove('active');
                    const next = idx == total - 1 ? 0 : idx + 1;
                    const target = element.querySelector('.wx-xten-listitem[list-idx="' + next.toString() + '"]');
                    target.classList.add('active');
                    const listToolbar = element.querySelector('.list-toolbar');
                    const itemToolbar = target.querySelector('.list-item-toolbar');
                    adjustToolbarPosition([listToolbar, itemToolbar]);
                %>
                </click>
            </icon>
        </pos-right>

        <pos-bottom>
            <repeat n="[$item-count]">
                <div name="slide-changer" style="display: inline-block; cursor: pointer; padding: 2px;">
                    <span>o</span>
                    <click>
                    <%
                        const element = event.target.closest('.wx-xten-banner');
                        var active = element.querySelector('.wx-xten-listitem.active');
                        const idx = active.getAttribute('list-idx');
                        active.classList.remove('active');
                        const clicked = event.target.closest('[name="slide-changer"]');
                        const target = element.querySelector('.wx-xten-listitem[list-idx="' + clicked.getAttribute('repeat-idx') + '"]');
                        target.classList.add('active');
                        const listToolbar = element.querySelector('.list-toolbar');
                        const itemToolbar = target.querySelector('.list-item-toolbar');
                        adjustToolbarPosition([listToolbar, itemToolbar]);
                    %>
                    </click>
                </div>
            </repeat>
        </pos-bottom>
    </data>

    <css>
        .wx-xten-banner > .wx-view-datalist {
            display: flex;
            position: relative;
            width: 100%;
        }

        .wx-xten-banner > .wx-view-datalist > .wx-xten-listitem {
            display: none;
            width: 100%;
            aspect-ratio: [$aspect-ratio||1];
        }

        .wx-xten-banner > .wx-view-datalist > .wx-xten-listitem.active {
            display: block;
        }
    </css>

    <initElement>
        const item = element.querySelector('.wx-xten-listitem');
        if (item) {
            item.classList.add('active');
        }
    </initElement>

    <init>
    <%
        xten._data = {};
        const slide = xten.view[0].node;
        const placeholder = slide.newChild('container');
        const _toolbar = node.findChild('toolbar');
        const toolbar = _toolbar.clone();
        _toolbar.remove();
        placeholder.insertChildren(0, node.children);
        xten._data.children = slide.children;
        xten._data.name = node.getValue('name');
        slide.attribs.element = '_hidden';

        node.empty();
        const list = node.newChild('div');
        list.attribs.name = 'wx-view-datalist';
        list.addClass('wx-view-datalist');
        node.addChild(toolbar);
    %>
    </init>

    <load enhance="append">
        <%
        const data = xten.data.node;
        const left = data.findChild('pos-left');
        processXtens(left, context);
        node.addChild(left.clone());
        
        const right = data.findChild('pos-right');
        processXtens(right, context);
        node.addChild(right.clone());
        
        const bottom = data.findChild('pos-bottom');
        common.substituteVars(bottom, node.attribs);
        processXtens(bottom, context);
        node.addChild(bottom.clone());
        %>
    </load>
</xten>
