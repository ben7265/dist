<xten name="styled" element="div">
    <allow>admin, designer</allow>

    <style>
        position: relative;
        overflow: hidden;
    </style>

    <css>
        .wx-xten-styled .styled-underlay,
        .wx-xten-styled .styled-background,
        .wx-xten-styled .styled-content
        {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
        }
        .wx-xten-styled > .wx-xten-toolbar {
            display: none;
        }

        .wx-xten-styled.wx-state-editable > .wx-xten-toolbar {
            display: initial;
        }
    </css>

    <view>
        <div class="styled-background">
            <media name="[$name]-background-image" blank="images/transparent.svg" style="height:100%;width:100%" />
        </div>
        <div class="styled-underlay"></div>
        <div class="styled-content">
            <node-content />
        </div>
    </view>

    <toolbar name="edit-style-toolbar">
        <icon name="styles">
            <tooltip>change styles</tooltip>
            <click fname="_styledChangeStyles">
            <%
                const element = wxfns.getToolbarParent(event);
                const original = element.getAttribute('allstyles');
                const input = wxfns.parseStyles(original);

                const output = await element.openModal('styles-dialog', 'Change Styles ' + element.getName(), input);
                if (!output) {
                    return;
                }
                
                await element.saveData(output);

                element.setAttribute('allstyles', wxfns.makeStyles(output));

                const nodeStyles = {};
                const underlayStyles = {};
                const contentStyles = {};

                for (var prop in output) {
                    switch (prop) {
                        case 'background-color':
                        case 'opacity':
                            underlayStyles[prop] = output[prop];
                        break;

                        case 'padding':
                            contentStyles[prop] = output[prop];
                        break;

                        default:
                            nodeStyles[prop] = output[prop];
                    }
                }

                element.addStyle(nodeStyles);

                const underlay = element.querySelector('.styled-underlay');
                const content = element.querySelector('.styled-content');

                underlay.addStyle(underlayStyles);
                content.addStyle(contentStyles);
            %>
            </click>
        </icon>
    </toolbar>

    <modal name="styles-dialog">
        <content>
            <form class="styles">
                <input-group name="padding" type="text" value="[$padding]" />
                <input-group name="border" type="text" value="[$border]" />
                <input-group name="border-radius" type="text" value="[$border-radius]" />
                <input-group name="color" type="color" value="[$color]" label="Text Color" />
                <input-group name="background-color" type="color" value="[$background-color]" />
                <input-group name="opacity" type="number" value="[$opacity]" min="0.0" max="1.0" step="0.01" label="Background Opacity" />
                <!--input-group name="background-size" type="text" value="[$background-size]" />
                <input-group name="background-position" type="text" value="[$background-position]" />
                <input-group name="background-repeat" type="text" value="[$background-repeat]" />
                <input-group name="background-attachment" type="text" value="[$background-attachment]" />
                <input-group name="background-blend-mode" type="text" value="[$background-blend-mode]" / -->            
            </form>
        </content>

        <buttons>
            <button type="submit">Save</button>
            <button type="cancel">Cancel</button>
        </buttons>
    </modal>

    <init>
    <%
        const backgroundType = node.attribs['background-type'] || 'cover';
        if (backgroundType == 'cover') {
            const background = node.findChild('.styled-background');
            const media = background.findChild('media');
            media.attribs['background-cover'] = 'yes';
        }
    %>
    </init>

    <load>
    <%
        const styles = await database.nodeValue(node, context, xten);

        node.attribs.allstyles = common.makeStyles(styles);

        const nodeStyles = {};
        const underlayStyles = {};
        const contentStyles = {};

        for (var prop in styles) {
            switch (prop) {
                case 'background-color':
                case 'opacity':
                    underlayStyles[prop] = styles[prop];
                break;

                case 'padding':
                    contentStyles[prop] = styles[prop];
                break;

                default:
                    nodeStyles[prop] = styles[prop];
            }
        }

        node.addStyle(nodeStyles);

        const underlay = node.findChild('.styled-underlay');
        underlay.addStyle(underlayStyles);

        const content = node.findChild('.styled-content');
        content.addStyle(contentStyles);
    %>
    </load>
</xten>
