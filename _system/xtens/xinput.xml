<xten name="xinput" element="div">
    <mandatory>name, type</mandatory>

    <css>
        .wx-xten-xinput[type="textarea"] label {display: inline-block;}
        .wx-xten-xinput textarea {width: 100%;min-height: 100px;}
        .wx-xten-xinput input {width: 100%;}
        .wx-xten-xinput input {width: 100%;}
        .wx-xten-xinput .xinput-error {color: red; padding: 3px; font-size: 0.8em;}
        .wx-xten-xinput[labels="none"] .label-column {display: none;}
    </css>

    <cssNode>
        #[$id] input {
            padding: [$padding||5px];
        }
    </cssNode>

    <view>
        <row item-gap="15px">
            <column name="label-column">
                <align horizontal="flex-end">
                    <container>
                        <label xten="inline" name="input-label-[$name]">
                            [$label||editable label]
                        </label>
                        <if var-value="required">
                            <span>*</span>
                        </if>
                    </container>
                </align>
            </column>
            <column ratio="3" name="input-column">
                <switch value="node.closest('.wx-xten-xinput').attribs.type">
                    <case match="textarea">
                        <textarea name="[$name]" required="[$required||false]" class="xinput-control" />
                    </case>
                    <case match="check-human">
                        <check-human class="xinput-control" />
                    </case>
                    <default>
                        <input name="[$name]" type="[$type]" required="[$required||false]" class="xinput-control" />
                    </default>
                </switch>
                <div class="xinput-error"></div>
            </column>
        </row>
        <gap height="5px"/>
    </view>

    <function name="clear">
    <%
        const type = element.getAttribute('type');
        const _input = element.querySelector('.xinput-control');
        switch (type) {
            case 'checkbox':
                _input.checked = false;
            break;
            case 'check-human':
                _input._value = false;
            break;
            default:
                _input.value = '';
        }
    %>
    </function>

    <function name="get-value">
    <%
        const type = element.getAttribute('type');
        const _input = element.querySelector('.xinput-control');
        var value = null;
        switch (type) {
            case 'checkbox':
                value = _input.checked;
            break;
            case 'check-human':
                return _input._value;
            break;
            default:
                value = _input.value;
        }
        return value;
    %>
    </function>

    <function name="validate">
    <%
        const name = element.getAttribute('name');
        const label = element.getAttribute('label');
        const type = element.getAttribute('type');
        const _input = element.querySelector('.xinput-control');
        const validate = element.getAttribute('validate');
        const required = element.getAttribute('required') == 'true';
        const errorElement = element.querySelector('.xinput-error');

        errorElement.innerText = '';

        var value = null;
        switch (type) {
            case 'checkbox':
                value = _input.checked;
            break;
            case 'check-human':
                value = _input._value;
            break;
            default:
                value = _input.value;
        }
        
        if (!value) {
            if (required) {
                errorElement.innerText = label + ' is required';
                return false;
            }

            return true;
        }

        if (!validate) {
            return true;
        }

        var valid = true;
        const checks = validate.split(/\s*\,\s*/);
        for (var i = 0; i < checks.length; i++) {
            const _check = checks[i].trim();
            const matches = _check.match(/^([a-z]+)\s*(\(\s*(.*)\s*\))?$/);
            const _fname = matches[1];
            if (!_fname || !validations[_fname]) {
                errorElement.innerText = 'validation ' + _fname + ' not defined';
                return false;
            }
            const _args = matches[3];
            const error = validations[_fname](value, _args);
            if (error) {
                valid = false;
                errorElement.innerText = label + ' is ' + error;
                break;
            }
        }

        return valid;
    %>
    </function>
</xten>
