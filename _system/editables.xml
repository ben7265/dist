<xten name="inline" element="span">
    <mandatory>name</mandatory>
    <allow>owner, admin</allow>
    <style>
        display: inline-block;
    </style>

    <css>
        .inline._unsaved_inline {
            border: 1px solid yellow;
        } 
        .inline._empty_inline {
            border: 1px solid red;
            width: 100%; 
            min-width: 50px;
        }
    </css>

    <load>
        const value = await database.inlineValue(node, context, xten);
        if (value) {
            node.text = value;
        }
    </load>

    <initElement>
    <%
        const access = checkAccess(element);
        if (access) {
            element.setAttribute('contenteditable', true);
            wxfns.addClass(element, 'editable');
            const prevText = element.innerText.trim();
            if (!prevText.length) {
                element.classList.add('_empty_inline');
            }
            else
            {
                element.classList.remove('_empty_inline');
            }
            element.__inlineValue = prevText;
        }
        else
        {
            element.removeAttribute('contenteditable');
            wxfns.removeClass(element, 'editable');
        }
    %>
    </initElement>

    <event name="keyup" fname="_inlineEventKeyUp">
    <%
        const element = event.target;
        const text = element.innerText.trim();
        const origValue = element.__inlineValue;
        if (!text) {
            element.classList.add('_empty_inline');
        }
        else {
            element.classList.remove('_empty_inline');
        }
        if (text != origValue) {
            element.classList.add('_unsaved_inline');
            const timout = setTimeout(((_element) => {

            })(event.target), 3000);
        }
        else {
            element.classList.remove('_unsaved_inline');
        }
    %>
    </event>

    <event name="blur" fname="_inlineEventBlur">
    <%
        const element = event.target;
        const text = element.innerText.trim();
        const origValue = element.__inlineValue;
        if (text == origValue) {
            return;
        }
        if (!text) {
            element.classList.add('_empty_inline');
        }
        else {
            element.classList.remove('_empty_inline');
        }
        if (text) {
            wxfns.transaction(element, 'save-page-data', element.innerText.trim());
            element.classList.remove('_unsaved_inline');
            element.classList.remove('_empty_inline');
            element.__inlineValue = text;
        }
        else {
            element.innerText = element.__inlineValue;
            element.classList.remove('_unsaved_inline');
            element.classList.remove('_empty_inline');
        }
    %>
    </event>
</xten>

<xten name="image" element="div">
    <mandatory>name</mandatory>
    <allow>owner, admin</allow>

    <view>
        <img src="[$src||images/blank.jpg]" alt="[$alt||$name]" />
        <toolbar top="[$toolbar-top||0]" left="[$toolbar-left||0]" right="[$toolbar-right||auto]" bottom="[$toolbar-bottom||auto]">
            <icon name="save">
                <tooltip>upload image</tooltip>
                <click fname="_imageSaveImage">
                    <upload name="save-image" file="changed-file" file-url="uploaded-url" />
                    <set-attrib name="src" child="img">
                        toolbarParent['uploaded-url']
                    </set-attrib>
                    <set-attrib name="src">
                        toolbarParent['uploaded-url']
                    </set-attrib>
                    <unset-var name="uploaded-url" />
                    <unset-var name="changed-file" />
                    <remove-class classes="image-changed" />
                </click>
            </icon>
            <icon name="close">
                <tooltip>cancel</tooltip>
                <click fname="_imageCancelImageSave">
                    <set-attrib name="src" child="img">
                        toolbarParent.getAttribute('src')
                    </set-attrib>
                    <unset-var name="changed-file" />
                    <remove-class classes="image-changed" />
                </click>
            </icon>
            <icon name="upload">
                <tooltip>select image</tooltip>
                <event name="click" fname="_imageUploadImage">
                    <selectfile file-type="image/*" file="changed-file" />
                    <set-attrib name="src" child="img">
                        URL.createObjectURL(toolbarParent['changed-file'])
                    </set-attrib>
                    <add-class classes="image-changed" />
                </event>
            </icon>
        </toolbar>
    </view>

    <style>
        position: relative;
        overflow: hidden;
        width: 100%;
        max-height: 100%;
    </style>

    <nodeStyle>
        aspect-ratio: [$aspect-ratio||auto];
    </nodeStyle>

    <css>
        .wx-xten-image > .wx-xten-toolbar {display: none;}
        .wx-xten-image.wx-state-editable .wx-xten-toolbar {display: inline-block;}
        .wx-xten-image.image-changed .wx-xten-toolbar {display: inline-block;}
        .wx-xten-image.image-changed {border: 5px solid red;}
        .wx-xten-image > img {width: 100%; height: 100%; object-fit: cover; object-position: center; }
        .wx-xten-image > .wx-xten-toolbar > .close {display: none;}
        .wx-xten-image > .wx-xten-toolbar > .save {display: none;}
        .wx-xten-image.image-changed > .wx-xten-toolbar > .close {display: inline-block;}
        .wx-xten-image.image-changed > .wx-xten-toolbar > .save {display: inline-block;}
    </css>

    <cssNode>
        [$id] > .img {aspect-ratio: [$aspect-ratio||auto]}
    </cssNode>

    <initElement>
    <%
        const ratio = parseFloat(element.getAttribute('aspect-ratio') || 0);
        if (ratio) {
            element.style.height = (element.offsetWidth * ratio) + 'px';
        }

        /*
        const image = element.querySelector('img');

        var containerWidth = element.offsetWidth;
        var containerHeight = element.offsetHeight;

        var imageWidth = image.naturalWidth;
        var imageHeight = image.naturalHeight;

        if (containerHeight && imageHeight) {
            var containerRatio = containerWidth / containerHeight;
            var imageRatio = imageWidth / imageHeight;
        }

        if (ratio) {
            containerWidth = element.offsetWidth;
            containerHeight = Math.round(containerWidth * ratio);
            element.style.height = containerHeight.toString() + 'px';

            var containerWidth = element.offsetWidth;
            var containerHeight = element.offsetHeight;

            var imageWidth = image.naturalWidth;
            var imageHeight = image.naturalHeight;

            var containerRatio = containerWidth / containerHeight;
            var imageRatio = imageWidth / imageHeight;

            if (containerRatio < imageRatio) {
                image.style.height = 'auto';
                image.style.width = '100%';
                image.style.margin = 'auto';
            }
            else
            {
                image.style.height = '100%';
                image.style.width = 'auto';
                image.style.margin = 'auto';
            }

            const resizeObserver = new ResizeObserver(entries => {
                const containerWidth = element.offsetWidth;
                const containerHeight = Math.round(containerWidth * ratio);
                element.style.height = containerHeight.toString() + 'px';
            });
            resizeObserver.observe(element);
        }
        */
        const toolbar = element.querySelector('.wx-xten-toolbar');
        const access = checkAccess(element);
        if (access) {
            wxfns.addClass(element, 'wx-state-editable');
        } else {
            wxfns.removeClass(element, 'wx-state-editable');
        }

        element.setAttribute('src', element.querySelector('img').getAttribute('src'));
    %>
    </initElement>

    <load>
        const value = await database.inlineValue(node, context, xten);
        if (value) {
            node.attribs.src = value;
            const img = node.findChildren('img')[0];
            img.attribs.src = value;
        }
    </load>
</xten>

<xten name="quickplay">
    <mandatory>name</mandatory>
    <allow>owner, admin</allow>
    <style>
        display: inline-block;
        position: relative;
    </style>

    <nodeStyle>
        aspect-ratio: [$aspect-ratio||auto];
    </nodeStyle>

    <css>
        .wx-xten-quickplay .wx-xten-toolbar {display: none;}
        .wx-xten-quickplay.wx-state-editable .wx-xten-toolbar {display: inline-block;}
        .wx-xten-quickplay.quickplay-changed .wx-xten-toolbar {display: inline-block;}
        .wx-xten-quickplay.quickplay-changed {border: 5px solid red;}
        .wx-xten-quickplay img {width: 100%; height: 100%; object-fit: cover; object-position: center; }
        .wx-xten-quickplay .wx-xten-toolbar > .close {display: none;}
        .wx-xten-quickplay .wx-xten-toolbar > .save {display: none;}
        .wx-xten-quickplay.quickplay-changed .wx-xten-toolbar > .close {display: inline-block;}
        .wx-xten-quickplay.quickplay-changed .wx-xten-toolbar > .save {display: inline-block;}
    </css>

    <load>
        const value = await database.inlineValue(node, context, xten);
        if (value) {
            node.src = value;
            const video = node.findChildren('video')[0];
            video.attribs.src = value;
        }
    </load>

    <view>
        <video src="[$src||videos/test.mp4]" width="100%" height="100%" autoplay="true" muted="true" loop="true"></video>
        <toolbar top="[$toolbar-top||0]" left="[$toolbar-left||0]" right="[$toolbar-right||auto]" bottom="[$toolbar-bottom||auto]">
            <icon name="save">
                <tooltip>upload short video</tooltip>
                <click fname="_qvSaveShortVideo">
                    <upload name="save-video" file="changed-file" file-url="uploaded-url" />
                    <set-attrib name="src" child="video">
                        toolbarParent['uploaded-url']
                    </set-attrib>
                    <set-attrib name="src">
                        toolbarParent['uploaded-url']
                    </set-attrib>
                    <unset-var name="uploaded-url" />
                    <unset-var name="changed-file" />
                    <remove-class classes="quickplay-changed" />
                </click>
            </icon>
            <icon name="close">
                <tooltip>cancel</tooltip>
                <click fname="_qvCancelShortVideoSave">
                    <set-attrib name="src" child="video">
                        toolbarParent.getAttribute('src')
                    </set-attrib>
                    <unset-var name="changed-file" />
                    <remove-class classes="quickplay-changed" />
                </click>
            </icon>
            <icon name="upload">
                <tooltip>select video</tooltip>
                <event name="click" fname="_qvUploadVideo">
                    <selectfile file-type="video/*" file="changed-file" />
                    <set-attrib name="src" child="video">
                        URL.createObjectURL(toolbarParent['changed-file'])
                    </set-attrib>
                    <add-class classes="quickplay-changed" />
                </event>
            </icon>
        </toolbar>
    </view>

    <initElement>
    <%
        const access = checkAccess(element);
        if (access) {
            wxfns.addClass(element, 'wx-state-editable');
        } else {
            wxfns.removeClass(element, 'wx-state-editable');
        }
        element.setAttribute('src', element.querySelector('video').getAttribute('src'));
    %>
    </initElement>
</xten>

<!-- incomplete -->
