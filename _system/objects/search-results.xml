<xten name="search-results">
    <view>
        <div name="search-results">
        </div>
        #include includes/search-item-view.xml
    </view>

    <load>
    <%
        const type = node.getValue('type') || context.vars['search-type'];
        if (!type) {
            node.attribs.error = 'search type missing from search';
            return;            
        }

        const container = node.findNamedChild('div', 'search-results');
        container.empty();

        const itemView = node.findNamedChild('div', 'search-item-view');
        itemView.attribs.element = '_hidden';

        if (type == 'pages') {
            node.removeClass('search-object');
            node.addClass('search-pages');

            const result = await database.search(node, context);
            if (result.rc != 'success') {
                node.attribs.error = result.rc;
                return;
            }

            const docs = result.docs;
            if (!docs.length) {
                const output = new DomNode('div');
                output.addClass('empty-search-results');
                output.text = 'no search results';
                return;
            }

            docs.forEach(doc => {
                const item = itemView.clone();
                const vars = doc;
                const urlsNode = new DomNode('div');
                urlsNode.addClass('url-list');
                doc.urls.forEach(_url => {
                    const _urlNode = new DomNode('a');
                    _urlNode.attribs.href = _url;
                    _urlNode.text = _url;
                    _urlNode.addClass('url-link');
                    urlsNode.addChild(_urlNode);
                });
                vars.urls = urlsNode.stringify();
                common.substituteVars(item, vars, true, common.recordPattern);
                delete item.attribs.element;
                container.addChild(item);
            });

            return;
        }

        node.removeClass('search-pages');
        node.addClass('search-object');

        const viewName = node.getValue('search-view') || context.vars['search-view'];
        if (!viewName) {
            node.attribs.error = 'search-view is mandatory for object search. type ' + type;
            return;            
        }

        const configNode = common.findNamed(node, 'object-config', type);
        if (!configNode) {
            node.attribs.error = 'could not find object-config for object-type ' + type;
            common.error(node.attribs.error);
            return;
        }

        searchView = configNode.findNamedChild('search-view', viewName);
        if (!searchView) {
            node.attribs.error = 'search-view ' + viewName + ' not found in object-type ' + type;
            common.error(node.attribs.error);
            return;
        }

        const text = node.getValue('search-text') || context.vars['search-text'];
        if (!text) {
            node.attribs.error = 'search text missing from search';
            return;            
        }

        const vars = {
            'search-text': text
        };

        const view = searchView.clone();

        common.substituteVars(view, vars);

        container.insertChildren(0, view.children);
        return;
    %>
    </load>
</xten>
