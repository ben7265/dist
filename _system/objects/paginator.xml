<xten name="paginator" element="div">
    <mandatory>object-type</mandatory>
    <style>
        text-align: center;
        padding: 5px;
        [$list-style||' '];
    </style>
    
    <css>
        .wx-xten-paginator > .paginator-link {
            display: inline-block; 
            text-decoration: none; 
            color: inherit; 
            padding: 5px; 
            border: 1px solid lightgray; 
            width: 30px;
            text-align: center;
            cursor: pointer;
            [$list-item-style||' ']
        }

        .wx-xten-paginator > .paginator-link.active {font-weight: bold; border-width: 3px;}
    </css>
    
    <initElement>
    <%
        const objType = element.getAttribute('object-type');
        const links = element.querySelectorAll('.paginator-link');

        const objList = element.closest('[xten="object-list"]');
        const listName = objList.getName();
        const sessionData = session.get(listName) || {};

        const updateActive = pagenum => {
            links.forEach(link => {
                const pagenum = parseInt(link.getAttribute('pagenum') || 1);
                if (current == pagenum) {
                    link.addClass('active');
                }
                else
                {
                    link.removeClass('active');
                }
            });
        };

        const current = sessionData.pagenum || 1;

        updateActive(current);

        links.forEach(link => {
            link.addEventListener('click', async (event) => {
                event.preventDefault();
                event.stopPropagation();
                const target = event.target;

                const pagenum = target.getAttribute('pagenum');
                sessionData.pagenum = pagenum;
                await session.set(listName, sessionData, pageName);
                updateActive(pagenum);
                objList.refresh();

                /* window.location.reload(); */
            });
        });
    %>
    </initElement>

    <load>
    <%
        const objType = node.attribs['object-type'];
        const objConfigNode = common.findNamed(node, 'object-config', objType);
        if (!objConfigNode) {
            common.nodeerror('invalid object type: ' + objType, node);
            return;
        }

        const objConfig = common._tojson(objConfigNode, 'page, view');

        const searchText = node.getValue('search-text');
        const parent = node.getValue('parent');
        const category = node.getValue('category');
        const _selector = node.getValue('selector');
        const dbquery = node.getValue('query');

        var selector = {
            type: objType
        };

        if (searchText) {
            selector['$text'] = { $search: searchText };
        }

        if (parent) {
            selector.parent = parent;
        }

        if (category) {
            selector.category = category;
        }

        if (_selector) {
            const list = common.nameValueStr2Json(_selector);
            selector = common.extend(selector, list);
        }

        if (dbquery) {
            try {
                const _query = JSON.parse(dbquery);
                for (var prop in _query) {
                    selector[prop] = _query[prop];
                }
            }
            catch (e) {
                node.attribs.error = 'invalide json passed to object-list ' + query;
                common.error(node.attribs.error);                
                return;
            }
        }

        const collection = node.getValue('collection') || objConfig.collection || 'object_data';

        const data = await database.count(selector, collection);
        if (data.rc != 'success') {
            common.nodeerror('System Error', data.rc);
            return;
        }

        node.empty();

        node.attribs['object-label'] = node.getValue('label') || objConfig.label || common.toCamelCase(objType);

        var pageSize = node.getValue('pagesize') || context.vars[objType + '-pagesize'] || configNode.getValue('pagesize');
        pageSize = pageSize ? parseInt(pageSize.toString().trim()) : 0;
        if (!pageSize) {
            return;
        }

        const query = context.query || {};
        const session = context.session || {};

        var pageSize = node.getValue('pagesize') || session.pagesize || vars[objType + '-pagesize'] || configNode.getValue('pagesize');

        var url = context.vars.url;

        url += '?';

        if (query) {
            for (var prop in query) {
                if (prop == objType + '-pagenum') {
                    continue;
                }
                url += prop + '=' + query[prop] + '&';
            }
        }

        const pages = Math.ceil(data.count / pageSize);
        if (pages > 1) {
            for (var i = 0; i < pages; i++) {
                const child = node.newChild('span');
                const _page = (i + 1).toString();
                child.attribs.pagenum = _page;
                child.text = _page;
                child.attribs.class = 'paginator-link';
            }
        }
    %>
    </load>
</xten>
